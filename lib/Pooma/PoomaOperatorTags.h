#ifndef POOMA_POOMA_POOMAOPERATORTAGS_H
#define POOMA_POOMA_POOMAOPERATORTAGS_H

///////////////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE WAS GENERATED AUTOMATICALLY!
// YOU SHOULD MODIFY THE INPUT FILES INSTEAD OF CHANGING THIS FILE DIRECTLY!
//
// THE FOLLOWING INPUT FILES WERE USED TO MAKE THIS FILE:
//
// MakeOperators
// PoomaOps.in
//
///////////////////////////////////////////////////////////////////////////////

#include <cstdlib>
#include <cmath>
#include <algorithm>

#if defined(POOMA_POOMA_POOMAOPERATORTAGS_H)
template<int D, class T, class EngineTag> class Tensor;

template<class OutputEngineTag, int D, class T, class EngineTag>
Tensor<D, T, OutputEngineTag>
symmetrize(const Tensor<D, T, EngineTag> &x);
#endif


struct FnReal
{
  PETE_EMPTY_CONSTRUCTORS(FnReal)
  template<class T>
  inline typename UnaryReturn<T, FnReal >::Type_t
  operator()(const T &a) const
  {
    return (real(a));
  }
};

struct FnImag
{
  PETE_EMPTY_CONSTRUCTORS(FnImag)
  template<class T>
  inline typename UnaryReturn<T, FnImag >::Type_t
  operator()(const T &a) const
  {
    return (imag(a));
  }
};

struct FnAbs
{
  PETE_EMPTY_CONSTRUCTORS(FnAbs)
  template<class T>
  inline typename UnaryReturn<T, FnAbs >::Type_t
  operator()(const T &a) const
  {
    return (std::abs(a));
  }
};

struct FnArg
{
  PETE_EMPTY_CONSTRUCTORS(FnArg)
  template<class T>
  inline typename UnaryReturn<T, FnArg >::Type_t
  operator()(const T &a) const
  {
    return (arg(a));
  }
};

struct FnNorm
{
  PETE_EMPTY_CONSTRUCTORS(FnNorm)
  template<class T>
  inline typename UnaryReturn<T, FnNorm >::Type_t
  operator()(const T &a) const
  {
    return (norm(a));
  }
};

struct FnConj
{
  PETE_EMPTY_CONSTRUCTORS(FnConj)
  template<class T>
  inline typename UnaryReturn<T, FnConj >::Type_t
  operator()(const T &a) const
  {
    return (conj(a));
  }
};

struct FnPow2
{
  PETE_EMPTY_CONSTRUCTORS(FnPow2)
  template<class T>
  inline typename UnaryReturn<T, FnPow2 >::Type_t
  operator()(const T &a) const
  {
    return (a*a);
  }
};

struct FnPow3
{
  PETE_EMPTY_CONSTRUCTORS(FnPow3)
  template<class T>
  inline typename UnaryReturn<T, FnPow3 >::Type_t
  operator()(const T &a) const
  {
    return (a*a*a);
  }
};

struct FnPow4
{
  PETE_EMPTY_CONSTRUCTORS(FnPow4)
  template<class T>
  inline typename UnaryReturn<T, FnPow4 >::Type_t
  operator()(const T &a) const
  {
    return (a*a*a*a);
  }
};

struct FnMagnitude
{
  PETE_EMPTY_CONSTRUCTORS(FnMagnitude)
  template<class T>
  inline typename UnaryReturn<T, FnMagnitude >::Type_t
  operator()(const T &a) const
  {
    return (magnitude(a));
  }
};

struct FnTrace
{
  PETE_EMPTY_CONSTRUCTORS(FnTrace)
  template<class T>
  inline typename UnaryReturn<T, FnTrace >::Type_t
  operator()(const T &a) const
  {
    return (trace(a));
  }
};

struct FnDet
{
  PETE_EMPTY_CONSTRUCTORS(FnDet)
  template<class T>
  inline typename UnaryReturn<T, FnDet >::Type_t
  operator()(const T &a) const
  {
    return (det(a));
  }
};

struct FnTranspose
{
  PETE_EMPTY_CONSTRUCTORS(FnTranspose)
  template<class T>
  inline typename UnaryReturn<T, FnTranspose >::Type_t
  operator()(const T &a) const
  {
    return (transpose(a));
  }
};

template<class OutputSymmetry>
struct FnSymmetrize
{
  PETE_EMPTY_CONSTRUCTORS_TEMPLATE(FnSymmetrize,class OutputSymmetry)
  template<class T>
  inline typename UnaryReturn<T, FnSymmetrize<OutputSymmetry> >::Type_t
  operator()(const T &a) const
  {
    return (symmetrize<OutputSymmetry>(a));
  }
};

struct FnDot
{
  PETE_EMPTY_CONSTRUCTORS(FnDot)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnDot >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return dot(a,b);
  }
};

struct FnPolar
{
  PETE_EMPTY_CONSTRUCTORS(FnPolar)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnPolar >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (polar(a,b));
  }
};

struct FnOuterProduct
{
  PETE_EMPTY_CONSTRUCTORS(FnOuterProduct)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnOuterProduct >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (outerProduct(a,b));
  }
};

struct FnOuterProductAsTinyMatrix
{
  PETE_EMPTY_CONSTRUCTORS(FnOuterProductAsTinyMatrix)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnOuterProductAsTinyMatrix >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (outerProductAsTinyMatrix(a,b));
  }
};

struct FnDotDot
{
  PETE_EMPTY_CONSTRUCTORS(FnDotDot)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnDotDot >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (dotdot(a,b));
  }
};

struct FnMin
{
  PETE_EMPTY_CONSTRUCTORS(FnMin)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnMin >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return 
#if POOMA_NO_STD_MIN_MAX
        (a<b?a:b)
#else
        std::min(a, b)
#endif
;
  }
};

struct FnMax
{
  PETE_EMPTY_CONSTRUCTORS(FnMax)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnMax >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return 
#if POOMA_NO_STD_MIN_MAX
        (a>b?a:b)
#else
        std::max(a, b)
#endif
;
  }
};

struct OpLT2
{
  PETE_EMPTY_CONSTRUCTORS(OpLT2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpLT2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a < b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpLT2 > {
  typedef bool Type_t;
};

struct OpLE2
{
  PETE_EMPTY_CONSTRUCTORS(OpLE2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpLE2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a <= b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpLE2 > {
  typedef bool Type_t;
};

struct OpGT2
{
  PETE_EMPTY_CONSTRUCTORS(OpGT2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpGT2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a > b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpGT2 > {
  typedef bool Type_t;
};

struct OpGE2
{
  PETE_EMPTY_CONSTRUCTORS(OpGE2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpGE2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a >= b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpGE2 > {
  typedef bool Type_t;
};

struct OpEQ2
{
  PETE_EMPTY_CONSTRUCTORS(OpEQ2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpEQ2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a == b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpEQ2 > {
  typedef bool Type_t;
};

struct OpNE2
{
  PETE_EMPTY_CONSTRUCTORS(OpNE2)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, OpNE2 >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    return (a != b);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, OpNE2 > {
  typedef bool Type_t;
};

struct FnMinAssign
{
  PETE_EMPTY_CONSTRUCTORS(FnMinAssign)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnMinAssign >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    
#if POOMA_NO_STD_MIN_MAX
        const_cast<T1 &>(a) = (a<b?a:b)
#else
        const_cast<T1 &>(a) = std::min(a, b)
#endif
;
    return const_cast<T1 &>(a);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, FnMinAssign > {
  typedef T1 &Type_t;
};

struct FnMaxAssign
{
  PETE_EMPTY_CONSTRUCTORS(FnMaxAssign)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnMaxAssign >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    
#if POOMA_NO_STD_MIN_MAX
        const_cast<T1 &>(a) = (a>b?a:b)
#else
        const_cast<T1 &>(a) = std::max(a, b)
#endif
;
    return const_cast<T1 &>(a);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, FnMaxAssign > {
  typedef T1 &Type_t;
};

struct FnAndAssign
{
  PETE_EMPTY_CONSTRUCTORS(FnAndAssign)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnAndAssign >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    const_cast<T1 &>(a) = (a && b);
    return const_cast<T1 &>(a);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, FnAndAssign > {
  typedef bool Type_t;
};

struct FnOrAssign
{
  PETE_EMPTY_CONSTRUCTORS(FnOrAssign)
  template<class T1, class T2>
  inline typename BinaryReturn<T1, T2, FnOrAssign >::Type_t
  operator()(const T1 &a, const T2 &b) const
  {
    const_cast<T1 &>(a) = (a || b);
    return const_cast<T1 &>(a);
  }
};

template<class T1, class T2 >
struct BinaryReturn<T1, T2, FnOrAssign > {
  typedef bool Type_t;
};

#endif // POOMA_POOMA_POOMAOPERATORTAGS_H

